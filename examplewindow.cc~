//$Id: examplewindow.cc 836 2007-05-09 03:02:38Z jjongsma $ -*- c++ -*-

/* gtkmm example Copyright (C) 2002 gtkmm development team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#include <iostream>
#include "examplewindow.h"
#include <fstream>
#include <string.h>
#include "parser.cpp"
#include <time.h>  

using namespace std;

void Sleep(float s) 
{ 
    int sec = int(s*1000000); 
    usleep(sec); 
}

 
ExampleWindow::ExampleWindow()
: m_VBox(Gtk::ORIENTATION_VERTICAL),
  m_Button_Quit("Quit")
{
  set_title("Your RSS's");
  set_border_width(5);
  set_default_size(get_width()*1000, get_height()*1000);

  add(m_VBox);

  
  News = parseit();
  
  ifstream f;
  char cwd[100];
  getcwd(cwd,100);
  
  
  //Add the TreeView, inside a ScrolledWindow, with the button underneath:
  m_ScrolledWindow.add(m_TreeView);

  //Only show the scrollbars when they are necessary:
  m_ScrolledWindow.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
  m_up_down_box.pack_start(add_button, Gtk::PACK_SHRINK);
  m_VBox.pack_start(m_separator, Gtk::PACK_SHRINK, 12);
  m_VBox.pack_start(m_ScrolledWindow);
  m_VBox.pack_start(m_ButtonBox, Gtk::PACK_SHRINK);

  m_up_down_box.get_style_context()->add_class("raised");
  m_up_down_box.get_style_context()->add_class("linked");
  
  add_button.set_image_from_icon_name("go-up-symbolic", Gtk::ICON_SIZE_BUTTON, true);
  
  
  m_ButtonBox.pack_start(m_Button_Quit, Gtk::PACK_SHRINK);
  m_ButtonBox.set_border_width(5);
  m_ButtonBox.set_layout(Gtk::BUTTONBOX_END);
  m_Button_Quit.signal_clicked().connect( sigc::mem_fun(*this,
              &ExampleWindow::on_button_quit) );
  

  //Create the Tree model:
  m_refTreeModel = Gtk::ListStore::create(m_Columns);
  m_TreeView.set_model(m_refTreeModel);
  char u[100];
  Glib::RefPtr<Gdk::Pixbuf> temp;
  //Fill the TreeView's model
  for(int i=0;i<News.num_item;i++){
  Gtk::TreeModel::Row row = *(m_refTreeModel->append());
  sprintf(u,"%s/res/Images/%d.jpg",cwd,i);
  cout<<u;
  temp = Gdk::Pixbuf::create_from_file(u)->scale_simple(100, 100, Gdk::INTERP_BILINEAR);
  row[m_Columns.m_col_pixbuf] = temp;
  row[m_Columns.m_col_name] = News.title[i];
  row[m_Columns.m_col_number] = i;
  
  }
  //Add the TreeView's view columns:
  //This number will be shown with the default numeric formatting.
  m_TreeView.append_column("Img",m_Columns.m_col_pixbuf);
  m_TreeView.append_column("Name", m_Columns.m_col_name);

  //m_TreeView.append_column_numeric("Formatted number", m_Columns.m_col_number,
     //    /* 10 digits, using leading zeroes. */);

  //Display a progress bar instead of a decimal number:
 /* auto cell = Gtk::manage(new Gtk::CellRendererProgress);
  int cols_count = m_TreeView.append_column("Some percentage", *cell);
  auto pColumn = m_TreeView.get_column(cols_count - 1);
  if(pColumn)
  {
    pColumn->add_attribute(cell->property_value(), m_Columns.m_col_percentage);
  }*/

  //Make all the columns reorderable:
  //This is not necessary, but it's nice to show the feature.
  //You can use TreeView::set_column_drag_function() to more
  //finely control column drag and drop.
  for(guint i = 0; i < 2; i++)
  {
    auto column = m_TreeView.get_column(i);
    column->set_reorderable();
  }

  show_all_children();
}

ExampleWindow::~ExampleWindow()
{
}

void ExampleWindow::on_button_quit()
{
  hide();
}

